name: Infra Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        options:
          - dev
          - test
          - uat
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }} Environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Get Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          # Parse Azure secret into Terraform variables
          $servicePrincipal = $env:AZURE_CREDENTIALS | ConvertFrom-Json
          $env:ARM_CLIENT_ID = $servicePrincipal.clientId
          $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
          $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
          $env:ARM_TENANT_ID = $servicePrincipal.tenantId

          # Save environment variable setup for subsequent steps
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object { Write-Output "$($_.Name)=$($_.Value)" } >> $env:GITHUB_ENV
        shell: pwsh

      - name: Terraform Init
        run: terraform init
        shell: pwsh

      - name: Static Testing
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        run: terraform plan -var-file="${{ github.event.inputs.environment }}.tfvars" -out="${{ github.event.inputs.environment }}.out"

      - name: Terraform Apply (Without Approval)
        if: ${{ github.event.inputs.environment != 'uat' && github.event.inputs.environment != 'prod' }}
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -auto-approve "${{ github.event.inputs.environment }}.out"
        shell: pwsh
        
      - name: Manual Approval (UAT and PROD)
        if: ${{ github.event.inputs.environment == 'uat' || github.event.inputs.environment == 'prod' }}
        uses: hmarr/auto-approve-action@v2
        with:
          approvers: "YOUR_GITHUB_USERNAME"
          label: "manual-approval"

      - name: Terraform Apply (With Approval)
        if: ${{ github.event.inputs.environment == 'uat' || github.event.inputs.environment == 'prod' }}
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -auto-approve "${{ github.event.inputs.environment }}.out"
        shell: pwsh
